pipeline {
    agent any

    parameters {
        choice(
            name: 'CLIENT',
            choices: ['arohan', 'ambit', 'cp', 'credent', 'demo', 'demo2019', 'develop', 'dvaraeregistry', 'finreach', 'gtp', 'indifi', 'kgfs', 'kgfs-liabilities', 'kinara', 'kissandhan', 'liquidityplatform', 'maitreya', 'mas', 'nafa', 'navadhan', 'newdemo', 'northernarc', 'samasta', 'samastalp', 'shramsarathi', 'smhfc', 'spicemoney'],
            description: 'Select the client'
        )
        
        choice(
            name: 'ENVIRONMENT',
            choices: ['uat', 'sit', 'mig', 'preprod', 'produat', 'demo', 'videopd'],
            description: 'Select the environment'
        )
        
        string(
            name: 'HOSTNAME',
            description: 'Enter the hostname'
        )
        
        string(
            name: 'PERDIX_URL',
            description: 'Enter the Perdix URL'
        )
        
        choice(
            name: 'STORAGE_TYPE',
            choices: ['S3', 'local'],
            description: 'Select file storage type'
        )
        
        file(
            name: 'CRONJOB_FILE',
            description: 'Upload cronjob file'
        )
        
        // Infrastructure related inputs
        string(
            name: 'EXISTING_SERVER_INSTANCE_ID',
            description: 'Enter existing server instance ID'
        )
        
        string(
            name: 'APP_VOLUME_ID',
            description: 'Enter App Volume ID'
        )
        
        string(
            name: 'APPDATA_VOLUME_ID',
            description: 'Enter AppData Volume ID'
        )
        
        string(
            name: 'DATABASE_VOLUME_ID',
            description: 'Enter Database Volume ID'
        )
        
        // Instance Tags
        string(
            name: 'TAG_NAME',
            description: 'Instance Name tag'
        )
        
        // Task checkboxes
        booleanParam(
            name: 'SETUP_HOSTNAME',
            description: 'Setup hostname'
        )
        
        booleanParam(
            name: 'CONTAINERIZE_SERVICES',
            description: 'Containerize services'
        )
        
        booleanParam(
            name: 'INSTALL_TELEPORT',
            description: 'Install Teleport'
        )
        
        booleanParam(
            name: 'SETUP_LOGROTATION',
            description: 'Setup logrotation'
        )
        
        booleanParam(
            name: 'SETUP_CRONJOB',
            description: 'Setup cronjob'
        )

    }

    stages {

        stage('Prepare') {
            steps {
                script {
                    // Setup Environmental variables
                    env.AMI_ID                      = "ami-04d143d89e43ce7fb"   
                    env.EXISTING_SERVER_INSTANCE_ID = params.EXISTING_SERVER_INSTANCE_ID      // Ubuntu 22.04 AMI
                    env.VPC_ID                      = "vpc-0f6424f35dc01cb6c"
                    env.SUBNET_ID                   = "subnet-09ffb189d6f69530a"
                    env.KEY_PAIR                    = "ansible"
                    env.AVAILABILITY_ZONE           = "ap-south-1a"
                    env.ENVIRONMENT                 = params.ENVIRONMENT
                    env.HOSTNAME                    = params.HOSTNAME
                    env.VOLUME_ID_APP               = params.APP_VOLUME_ID
                    env.VOLUME_ID_APPDATA           = params.APPDATA_VOLUME_ID
                    env.VOLUME_ID_DATABASE          = params.DATABASE_VOLUME_ID
                    env.ROUTE53_ZONE_ID             = "Z14HUFX62W338H"
                    env.LISTENER_ARN                = "arn:aws:elasticloadbalancing:ap-south-1:203862109330:listener/app/DEV-MMB-ELB/617d6a7924757988/3c6ee87c6cfc2be5"
                    env.PERDIX_URL                  = params.PERDIX_URL
                    env.NAME_TG                     = params.TAG_NAME
                    env.BILLABLEPARTY_TG            = params.CLIENT
                    env.DNS_NAME                    = params.HOSTNAME
                    if (params.ENVIRONMENT == 'sit') {
                        env.SERVERCATEGORY_TG = "Client-SIT"
                    } else {
                        env.SERVERCATEGORY_TG = "Client-UAT"
                    }


                    // Display all input parameters
                    echo "AMI-ID: ${env.AMI_ID}"
                    echo "EXISTING_SERVER_INSTANCE_ID: ${env.EXISTING_SERVER_INSTANCE_ID}"
                    echo "Client: ${params.CLIENT}"
                    echo "Environment: ${params.ENVIRONMENT}"
                    echo "Hostname: ${params.HOSTNAME}"
                    echo "Perdix URL: ${params.PERDIX_URL}"
                    echo "File Storage: ${params.STORAGE_TYPE}"
                    echo "Existing Server Instance ID: ${params.EXISTING_SERVER_INSTANCE_ID}"
                    echo "App Volume ID: ${params.APP_VOLUME_ID}"
                    echo "AppData Volume ID: ${params.APPDATA_VOLUME_ID}"
                    echo "Database Volume ID: ${params.DATABASE_VOLUME_ID}"
                    echo "Instance Tags:"
                    echo "  Name: ${params.TAG_NAME}"
                    echo "  BillableParty: ${env.BILLABLEPARTY_TG}"
                    echo "  ServerCategory: ${env.SERVERCATEGORY_TG}"
                    
                    // Save uploaded cronjob file if provided
    if (params.SETUP_CRONJOB && params.CRONJOB_FILE) {
        sh "mkdir -p /var/jenkins_home/workspace/dvara-infra/server-upgrade/dev"
        sh "cp '${params.CRONJOB_FILE}' '/var/jenkins_home/workspace/dvara-infra/server-upgrade/dev/cronjob.txt'"
        echo "Cronjob file saved"
    } else {
        echo "Cronjob setup not requested or no file uploaded"
    }
                }
            }
        }

        stage('Run Ansible Playbooks') {
            steps {
                script {
                    dir('/var/jenkins_home/workspace/ansible') {
                    // Create inventory file
                    sh 'echo "[target_host]" > inventory.ini'
                    sh "echo \"${params.HOSTNAME}\" >> inventory.ini"

                    // Common extra vars for all playbooks
                    def commonExtraVars = [
                        vpc_id: env.VPC_ID,
                        subnet_id: env.SUBNET_ID,
                        tag_name: params.TAG_NAME,
                        tag_billable_party: params.TAG_BILLABLE_PARTY,
                        tag_server_category: params.TAG_SERVER_CATEGORY
                    ]

                sshagent(credentials: ['ansible_ssh']) {
                    // Run playbooks based on selected tasks
                    if (params.SETUP_HOSTNAME) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_hostname.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                hostname: env.HOSTNAME
                            ]
                        )
                    }

                    if (params.CONTAINERIZE_SERVICES) {
                        ansiblePlaybook(
                            playbook: 'playbooks/containerize_services.yml',
                            inventory: 'inventory.ini'
                        )
                    }

                    if (params.INSTALL_TELEPORT) {
                        parameters {
                            string(
                            name: 'JOIN_TOKEN',
                            description: 'Enter the Token to install teleport'
                            )
                        }
                        ansiblePlaybook(
                            playbook: 'playbooks/install_teleport.yml',
                            inventory: 'inventory.ini',
                            extraVars: [
                                join_token: params.JOIN_TOKEN,
                                env: params.ENVIRONMENT,
                                client: params.CLIENT
                            ]
                        )
                    }

                    if (params.SETUP_LOGROTATION) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_logrotation.yml',
                            inventory: 'inventory.ini'
                        )
                    }

                    if (params.SETUP_CRONJOB) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_cronjob.yml',
                            inventory: 'inventory.ini',
                            extraVars: [
                                cron_file_local: '/var/jenkins_home/workspace/dvara-infra/server-upgrade/dev/cronjob.txt'
                            ]
                        )
                    }

                }
                }
                }
            }
        }
  }

   // post {
       // always {
        //    cleanWs()
      //  }
    //}
}