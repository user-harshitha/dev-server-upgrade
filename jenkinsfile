pipeline {
    agent any

    parameters {
        choice(
            name: 'CLIENT',
            choices: ['arohan', 'ambit', 'cp', 'credent', 'demo', 'demo2019', 'develop', 'dvaraeregistry', 'finreach', 'gtp', 'indifi', 'kgfs', 'kgfs-liabilities', 'kinara', 'kissandhan', 'liquidityplatform', 'maitreya', 'mas', 'nafa', 'navadhan', 'newdemo', 'northernarc', 'samasta', 'samastalp', 'shramsarathi', 'smhfc', 'spicemoney'],
            description: 'Select the client'
        )
        
        choice(
            name: 'ENVIRONMENT',
            choices: ['uat', 'sit', 'mig', 'preprod', 'produat', 'demo', 'videopd'],
            description: 'Select the environment'
        )
        
        string(
            name: 'HOSTNAME',
            description: 'Enter the hostname'
        )
        
        string(
            name: 'PERDIX_URL',
            description: 'Enter the Perdix URL'
        )
        
        choice(
            name: 'STORAGE_TYPE',
            choices: ['S3', 'local'],
            description: 'Select file storage type'
        )
        
        file(
            name: 'CRONJOB_FILE',
            description: 'Upload cronjob file'
        )
        
        // Infrastructure related inputs
        string(
            name: 'EXISTING_SERVER_INSTANCE_ID',
            description: 'Enter existing server instance ID'
        )
        
        string(
            name: 'APP_VOLUME_ID',
            description: 'Enter App Volume ID'
        )
        
        string(
            name: 'APPDATA_VOLUME_ID',
            description: 'Enter AppData Volume ID'
        )
        
        string(
            name: 'DATABASE_VOLUME_ID',
            description: 'Enter Database Volume ID'
        )
        
        // Instance Tags
        string(
            name: 'TAG_NAME',
            description: 'Instance Name tag'
        )
        
        // Task checkboxes
        booleanParam(
            name: 'SETUP_HOSTNAME',
            description: 'Setup hostname'
        )
        
        booleanParam(
            name: 'CONTAINERIZE_SERVICES',
            description: 'Containerize services'
        )
        
        booleanParam(
            name: 'INSTALL_TELEPORT',
            description: 'Install Teleport'
        )
        
        booleanParam(
            name: 'SETUP_LOGROTATION',
            description: 'Setup logrotation'
        )
        
        booleanParam(
            name: 'SETUP_CRONJOB',
            description: 'Setup cronjob'
        )

    }

    stages {

        stage('Prepare') {
            steps {
                script {
                    // Setup Environmental variables
                    env.AMI_ID                      = "ami-04d143d89e43ce7fb"   
                    env.EXISTING_SERVER_INSTANCE_ID = params.EXISTING_SERVER_INSTANCE_ID      // Ubuntu 22.04 AMI
                    env.VPC_ID                      = "vpc-0f6424f35dc01cb6c"
                    env.SUBNET_ID                   = "subnet-09ffb189d6f69530a"
                    env.KEY_PAIR                    = "ansible"
                    env.AVAILABILITY_ZONE           = "ap-south-1a"
                    env.ENVIRONMENT                 = params.ENVIRONMENT
                    env.HOSTNAME                    = params.HOSTNAME
                    env.VOLUME_ID_APP               = params.APP_VOLUME_ID
                    env.VOLUME_ID_APPDATA           = params.APPDATA_VOLUME_ID
                    env.VOLUME_ID_DATABASE          = params.DATABASE_VOLUME_ID
                    env.ROUTE53_ZONE_ID             = "Z14HUFX62W338H"
                    env.LISTENER_ARN                = "arn:aws:elasticloadbalancing:ap-south-1:203862109330:listener/app/DEV-MMB-ELB/617d6a7924757988/3c6ee87c6cfc2be5"
                    env.PERDIX_URL                  = params.PERDIX_URL
                    env.NAME_TG                     = params.TAG_NAME
                    env.BILLABLEPARTY_TG            = params.CLIENT
                    env.SERVERCATEGORY_TG           = (params.ENVIRONMENT == 'sit') ? "Client-SIT" : "Client-UAT"
                    env.DNS_NAME                    = params.HOSTNAME


                    // Display all input parameters
                    echo "AMI-ID: ${env.AMI_ID}"
                    echo "EXISTING_SERVER_INSTANCE_ID: ${env.EXISTING_SERVER_INSTANCE_ID}"
                    echo "Client: ${params.CLIENT}"
                    echo "Environment: ${params.ENVIRONMENT}"
                    echo "Hostname: ${params.HOSTNAME}"
                    echo "Perdix URL: ${params.PERDIX_URL}"
                    echo "File Storage: ${params.STORAGE_TYPE}"
                    echo "Existing Server Instance ID: ${params.EXISTING_SERVER_INSTANCE_ID}"
                    echo "App Volume ID: ${params.APP_VOLUME_ID}"
                    echo "AppData Volume ID: ${params.APPDATA_VOLUME_ID}"
                    echo "Database Volume ID: ${params.DATABASE_VOLUME_ID}"
                    echo "Instance Tags:"
                    echo "  Name: ${params.TAG_NAME}"
                    echo "  BillableParty: ${env.BILLABLEPARTY_TG}"
                    echo "  ServerCategory: ${params.SERVERCATEGORY_TG}"
                    
                    // Save uploaded cronjob file if provided
                    if (params.SETUP_CRONJOB && params.CRONJOB_FILE) {
                        writeFile file: 'cronjob_file', text: params.CRONJOB_FILE.readToString()
                        echo "Cronjob file saved"
                    }
                }
            }
        }

    stage('Checkout') {
      steps {
        git url: 'https://github.com/user-harshitha/terraform-scripts.git', branch: 'main'
      }
    }

    stage('Generate tfvars') {
      steps {
        script {
            // Create directory in Jenkins workspace (absolute path)
            def workspacePath = pwd()  // This gives you the absolute path
            def terraformDir = "/var/jenkins_home/workspace/dvara-infra/server-upgrade/dev"
        sh '''
        echo "Current workspace path: ${pwd}"
        ls -la /var/jenkins_home/workspace/dev-server-upgrade/
        echo $pwd
        echo "current working directory"
        '''
        writeFile file: '/var/jenkins_home/workspace/dvara-infra/server-upgrade/dev/terraform.tfvars', text: """
ami_id             = "${env.AMI_ID}"
existing_server_instance_id = "${env.EXISTING_SERVER_INSTANCE_ID}"
subnet_id          = "${env.SUBNET_ID}"
key_pair           = "${env.KEY_PAIR}"
env                = "${env.ENVIRONMENT}"
availability_zone  = "${env.AVAILABILITY_ZONE}"
base_volume_id_app = "${env.VOLUME_ID_APP}"
base_volume_id_appdata = "${env.VOLUME_ID_APPDATA}"
base_volume_id_database = "${env.VOLUME_ID_DATABASE}"
hostname           = "${env.HOSTNAME}"
route53_zone_id    = "${env.ROUTE53_ZONE_ID}"
perdix_url         = "${env.PERDIX_URL}"
vpc_id             = "${env.VPC_ID}"
alb_https_listener_arn = "${env.LISTENER_ARN}" 
ebs_volume_tags = {
  Name = "${env.NAME_TG}"
  BillableParty = "${env.BILLABLEPARTY_TG}"
  }  
instance_tags = {
  Name = "${env.NAME_TG}"
  BillableParty = "${env.BILLABLEPARTY_TG}"
  ServerCategory = "${env.SERVERCATEGORY_TG}"
  DNS_Name = "${env.DNS_NAME}"
  }
        """
      }
       }
    }

    stage('Copy Terraform Scripts') {
        steps {
            script {
                // Use absolute paths and proper quoting
                def sourceDir = "/var/jenkins_home/workspace/dev-server-upgrade/Server_Upgrade/dev"
                def targetDir = "/var/jenkins_home/workspace/dvara-infra/server-upgrade/dev"
            
                sh """
                    echo "Copying Terraform scripts..."
                    cp -r "${sourceDir}/"* "${targetDir}/"
                    cd "${targetDir}"
                    echo "Current directory after cd: \$(pwd)"
                    ls -la
                """
            
                // Store the working directory for later stages
                env.TF_WORKING_DIR = targetDir
            }
        }
    }

    stage('Setup AWS Credentials') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            cd /var/jenkins_home/workspace/dvara-infra/server-upgrade/dev
            echo "Current directory after cd: \$(pwd)"
            ls -la            
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init
            terraform validate
            terraform plan -var-file="terraform.tfvars"
          '''
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        input message: 'Apply Terraform changes?'
        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            cd /var/jenkins_home/workspace/dvara-infra/server-upgrade/dev
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

            terraform apply -auto-approve -var-file="terraform.tfvars"
            terraform output -json > tf_outputs.json
          '''
        }
      }
    }

    stage('AWS ALB Update') {
        steps {
            script {
                def tfOutputs = readJSON file: 'tf_outputs.json'
                env.TG_ARN = tfOutputs.target_group_arn.value
            
                sh """
                /var/jenkins_home/workspace/dvara-infra/server-upgrade/dev
                python3 modify_alb_rule.py \
                 --listener-arn "${env.LISTENER_ARN}" \
                 --host-header "${env.PERDIX_URL}" \
                  --target-group-arn "${env.TG_ARN}"
            """
            }
        }
    }

        stage('Run Ansible Playbooks') {
            steps {
                script {
                    // Create inventory file
                    sh 'echo "[target_host]" > inventory.ini'
                    sh "echo \"${params.HOSTNAME}\" >> inventory.ini"

                    // Common extra vars for all playbooks
                    def commonExtraVars = [
                        vpc_id: env.VPC_ID,
                        subnet_id: env.SUBNET_ID,
                        tag_name: params.TAG_NAME,
                        tag_billable_party: params.TAG_BILLABLE_PARTY,
                        tag_server_category: params.TAG_SERVER_CATEGORY
                    ]

                    // Run playbooks based on selected tasks
                    if (params.SETUP_HOSTNAME) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_hostname.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                hostname: params.HOSTNAME,
                                environment: params.ENVIRONMENT
                            ]
                        )
                    }

                    if (params.CONTAINERIZE_SERVICES) {
                        ansiblePlaybook(
                            playbook: 'playbooks/containerize_services.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                client: params.CLIENT,
                                perdix_url: params.PERDIX_URL,
                                file_storage: params.STORAGE_TYPE
                            ]
                        )
                    }

                    if (params.INSTALL_TELEPORT) {
                        ansiblePlaybook(
                            playbook: 'playbooks/install_teleport.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                environment: params.ENVIRONMENT
                            ]
                        )
                    }

                    if (params.SETUP_LOGROTATION) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_logrotation.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars
                        )
                    }

                    if (params.SETUP_CRONJOB) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_cronjob.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                cronjob_file: 'cronjob_file'
                            ]
                        )
                    }

                    if (params.SETUP_CHECKMK) {
                        ansiblePlaybook(
                            playbook: 'playbooks/setup_checkmk.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                client: params.CLIENT,
                                environment: params.ENVIRONMENT
                            ]
                        )
                    }

                    // Infrastructure playbooks
                    if (params.EXISTING_SERVER_INSTANCE_ID || params.LISTENER_ARN || 
                        params.APP_VOLUME_ID || params.APPDATA_VOLUME_ID || params.DATABASE_VOLUME_ID) {
                        ansiblePlaybook(
                            playbook: 'playbooks/infrastructure_setup.yml',
                            inventory: 'inventory.ini',
                            extraVars: commonExtraVars + [
                                instance_id: params.EXISTING_SERVER_INSTANCE_ID,
                                listener_arn: params.LISTENER_ARN,
                                app_volume_id: params.APP_VOLUME_ID,
                                appdata_volume_id: params.APPDATA_VOLUME_ID,
                                database_volume_id: params.DATABASE_VOLUME_ID
                            ]
                        )
                    }
                }
            }
        }
  }

    post {
        always {
            cleanWs()
        }
    }
}