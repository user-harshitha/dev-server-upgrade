pipeline {
    agent any

    parameters {

        choice(
            name: 'BASE_CLIENT',
            choices: ['arohan', 'ambit', 'cp', 'credent', 'demo', 'demo2019', 'develop', 'dvaraeregistry', 'finreach', 'gtp', 'indifi', 'kgfs', 'kgfs-liabilities', 'kinara', 'kissandhan', 'liquidityplatform', 'maitreya', 'mas', 'nafa', 'navadhan', 'newdemo', 'northernarc', 'samasta', 'samastalp', 'shramsarathi', 'smhfc', 'spicemoney'],
            description: 'Select the base client'
        )

        choice(
            name: 'BASE_ENVIRONMENT',
            choices: ['uat', 'sit', 'mig', 'preprod', 'produat', 'demo'],
            description: 'Select the base environment'
        )

        string(
            name: 'NEW_CLIENT',
            description: 'Enter the new client code in small case'
        )
        
        choice(
            name: 'NEW_ENVIRONMENT',
            choices: ['uat', 'sit', 'mig', 'preprod', 'produat', 'demo'],
            description: 'Select the new environment'
        )
        
        string(
            name: 'BASE_SERVER_HOSTNAME',
            description: 'Enter the hostname'
        )

        string(
            name: 'NEW_SERVER_HOSTNAME',
            description: 'Enter the hostname'
        )

        string(
            name: 'BASE_SERVER_URL',
            description: 'Enter the Perdix URL'
        )
        
        string(
            name: 'PERDIX_URL',
            description: 'Enter the Perdix URL'
        )
        
        // Infrastructure related inputs
        string(
            name: 'BASE_SERVER_INSTANCE_ID',
            description: 'Enter existing server instance ID'
        )
        
        string(
            name: 'APP_VOLUME_ID',
            description: 'Enter App Volume ID'
        )
        
        string(
            name: 'APPDATA_VOLUME_ID',
            description: 'Enter AppData Volume ID'
        )
        
        string(
            name: 'DATABASE_VOLUME_ID',
            description: 'Enter Database Volume ID'
        )
        
        // Instance Tags
        string(
            name: 'TAG_NAME',
            description: 'Instance Name tag'
        )

        string(
            name: 'TAG_BILLABLEPARTY',
            description: 'Enter the Billable Party Tag'
        )
        
    }

    environment {
    ENV_PATH = "./Server_Creation/dev/"
    }



    stages {
    stage('Checkout') {
      steps {
        git url: 'https://github.com/user-harshitha/terraform-scripts.git', branch: 'main'
      }
    }
        stage('Prepare') {
            steps {
                script {
                    // Setup Environmental variables
                    env.AMI_ID                      = "ami-04d143d89e43ce7fb"   
                    env.EXISTING_SERVER_INSTANCE_ID = params.EXISTING_SERVER_INSTANCE_ID      // Ubuntu 22.04 AMI
                    env.VPC_ID                      = "vpc-0f6424f35dc01cb6c"
                    env.SUBNET_ID                   = "subnet-09ffb189d6f69530a"
                    env.KEY_PAIR                    = "ansible"
                    env.AVAILABILITY_ZONE           = "ap-south-1a"
                    env.CLIENT                      = params.NEW_CLIENT
                    env.ENVIRONMENT                 = params.NEW_ENVIRONMENT
                    env.HOSTNAME                    = params.NEW_SERVER_HOSTNAME
                    env.VOLUME_ID_APP               = params.APP_VOLUME_ID
                    env.VOLUME_ID_APPDATA           = params.APPDATA_VOLUME_ID
                    env.VOLUME_ID_DATABASE          = params.DATABASE_VOLUME_ID
                    env.ROUTE53_ZONE_ID             = "Z14HUFX62W338H"
                    env.LISTENER_ARN                = "arn:aws:elasticloadbalancing:ap-south-1:203862109330:listener/app/DEV-MMB-ELB/617d6a7924757988/3c6ee87c6cfc2be5"
                    env.PERDIX_URL                  = params.PERDIX_URL
                    env.NAME_TG                     = params.TAG_NAME
                    env.BILLABLEPARTY_TG            = params.TAG_BILLABLEPARTY
                    env.DNS_NAME                    = params.NEW_SERVER_HOSTNAME
                    if (env.ENVIRONMENT == 'sit') {
                        env.SERVERCATEGORY_TG = "Client-SIT"
                    } else {
                        env.SERVERCATEGORY_TG = "Client-UAT"
                    }


                    // Display all input parameters
                    echo "AMI-ID: ${env.AMI_ID}"
                    echo "EXISTING_SERVER_INSTANCE_ID: ${env.EXISTING_SERVER_INSTANCE_ID}"
                    echo "Client: ${env.CLIENT}"
                    echo "Environment: ${env.ENVIRONMENT}"
                    echo "Hostname: ${params.NEW_SERVER_HOSTNAME}"
                    echo "Perdix URL: ${params.PERDIX_URL}"
                    echo "File Storage: ${params.STORAGE_TYPE}"
                    echo "Existing Server Instance ID: ${params.EXISTING_SERVER_INSTANCE_ID}"
                    echo "App Volume ID: ${params.APP_VOLUME_ID}"
                    echo "AppData Volume ID: ${params.APPDATA_VOLUME_ID}"
                    echo "Database Volume ID: ${params.DATABASE_VOLUME_ID}"
                    echo "Instance Tags:"
                    echo "  Name: ${params.TAG_NAME}"
                    echo "  BillableParty: ${env.BILLABLEPARTY_TG}"
                    echo "  ServerCategory: ${env.SERVERCATEGORY_TG}"

                }
            }
        }

        stage('Commit folders for new client in jenkins git repo') {
            steps {
              script{
              dir(env.ENV_PATH){
withCredentials([usernamePassword(credentialsId: 'gitea-creds', usernameVariable: 'GITEA_USERNAME', passwordVariable: 'GITEA_TOKEN')]) {
  sh (
    script: """
      python3 git-automation.py \
        --username ${GITEA_USERNAME} \
        --token ${GITEA_TOKEN} \
        --base-client ${params.BASE_CLIENT} \
        --base-env ${params.BASE_ENVIRONMENT} \
        --new-client ${params.NEW_CLIENT} \
        --new-env ${params.NEW_ENVIRONMENT} \
        --old-hostname ${params.BASE_SERVER_HOSTNAME} \
        --new-hostname ${params.NEW_SERVER_HOSTNAME} \
        --old-url ${params.BASE_SERVER_URL} \
        --new-url ${params.PERDIX_URL} \
        --workspace_dir ${env.ENV_PATH}
    """,
    shell: '/bin/bash'
  )
}
              }
              }
            }
         }


   // post {
       // always {
        //    cleanWs()
      //  }
    //}
}

}
